name: CI Test Workflow

# Trigger the workflow on pull requests and pushes to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests with PostgreSQL
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16 # Specify the PostgreSQL version
        env:
          POSTGRES_USER: testuser # Set the PostgreSQL user
          POSTGRES_PASSWORD: testpass # Set the PostgreSQL password
          POSTGRES_DB: testdb # Set the PostgreSQL database
        options: >- # Options to wait for PostgreSQL to start
          --health-cmd "pg_isready -U testuser" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
        ports:
          - 5432:5432

        # MariaDB service for Appwrite
      # mariadb:
      #   image: mariadb:latest
      #   env:
      #     MYSQL_ROOT_PASSWORD: root # MariaDB-specific env variables
      #     MYSQL_DATABASE: appwrite
      #     MYSQL_USER: appwriteuser
      #     MYSQL_PASSWORD: appwritepass
      #   ports:
      #     - 3306:3306
      #   options: >-
      #     --health-cmd="mysqladmin ping -h localhost"
      #     --health-interval=10s
      #     --health-timeout=5s
      #     --health-retries=5

    env:
      DB_HOST: 127.0.0.1 # PostgreSQL is running locally in the container
      DB_PORT: 5432 # PostgreSQL default port
      DB_USERNAME: testuser # Match the user set in the postgres service
      DB_PASSWORD: testpass # Match the password set in the postgres service
      DB_NAME: testdb # Match the database set in the postgres service
      NODE_ENV: test # Set the Node.js environment to test

      # Appwrite-specific environment variables
      APPWRITE_ENDPOINT: ${{ secrets.APPWRITE_ENDPOINT }}
      APPWRITE_PROJECT_ID: ${{ secrets.APPWRITE_PROJECT_ID }}
      APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      APPWRITE_DATABASE_ID: ${{ secrets.APPWRITE_DATABASE_ID }}
      APPWRITE_USER_COLLECTION_ID: ${{ secrets.APPWRITE_USER_COLLECTION_ID }}
      APPWRITE_DB_HOST: mariadb
      APPWRITE_DB_USERNAME: appwriteuser
      APPWRITE_DB_PASSWORD: appwritepass
      APPWRITE_DB_NAME: appwrite

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.4.0'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: yarn install

      # Step 4: Generate database migrations
      - name: Generate migrations
        run: yarn run migration:generate

      # Step 5: Run database migrations
      - name: Run migrations
        run: yarn run migration:run

      # Step 6: Set up Docker Compose for CI (including Appwrite)
      # - name: Start Appwrite and Dependencies
      #   run: docker compose -f ./.github/config/docker/docker-compose.ci.yml up -d

      # Step 7: Wait for services to be healthy
      # - name: Wait for Appwrite to be ready
      #   run: |
      #     until curl -s -o /dev/null -w "%{http_code}" http://localhost/v1/health; do
      #       echo "Waiting for Appwrite to be ready..."
      #       sleep 5
      #     done
      #   timeout-minutes: 1

      # Step 8: Run tests
      - name: Run tests
        run: yarn test

      # Step 9: Tear down the services
      - name: Stop and Remove Services
        if: always()
        run: docker compose -f ./.github/config/docker/docker-compose.ci.yml down
